{"version":3,"file":"static/js/241.13605963.chunk.js","mappings":"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","sources":["Pages/Caro/CaroAl.js"],"sourcesContent":["\r\nexport default class AI {\r\n    constructor(init) {\r\n        this.board = init.board;\r\n        this.size = init.size;\r\n        this.ai = init.ai;\r\n        this.player = init.ai === 1 ? 2 : 1;\r\n        this.condition = init.size >= 15 ? 5 : 3;\r\n        this.partition = { left: null, right: null, top: null, bottom: null };\r\n        this.w = [0, 20, 17, 15.4, 14, 10];\r\n        this.winningMove = 1000000;\r\n        this.openFour = 100000;\r\n        this.fork = 10000;\r\n        this.level = init.level || 'medium';\r\n    }\r\n\r\n    setBoard(board) {\r\n        this.board = board;\r\n    }\r\n\r\n    _partitionBoard() {\r\n        let top = this.size - 1, left = this.size - 1, right = 0, bottom = 0;\r\n        let found = false;\r\n        for (let r = 0; r < this.size; r++) {\r\n            for (let c = 0; c < this.size; c++) {\r\n                if (this.board[r][c] !== 0) {\r\n                    found = true;\r\n                    top = Math.min(top, r);\r\n                    bottom = Math.max(bottom, r);\r\n                    left = Math.min(left, c);\r\n                    right = Math.max(right, c);\r\n                }\r\n            }\r\n        }\r\n        if (!found) {\r\n            const center = Math.floor(this.size / 2);\r\n            this.partition = {\r\n                left: Math.max(0, center - 2),\r\n                right: Math.min(this.size - 1, center + 2),\r\n                top: Math.max(0, center - 2),\r\n                bottom: Math.min(this.size - 1, center + 2)\r\n            };\r\n        } else {\r\n            this.partition = {\r\n                left: Math.max(0, left - 2),\r\n                right: Math.min(this.size - 1, right + 2),\r\n                top: Math.max(0, top - 2),\r\n                bottom: Math.min(this.size - 1, bottom + 2)\r\n            };\r\n        }\r\n    }\r\n\r\n    hasNeighbors(i, j) {\r\n        const dirs = [[0, -1], [0, 1], [-1, 0], [1, 0], [-1, -1], [-1, 1], [1, -1], [1, 1]];\r\n        for (let [di, dj] of dirs) {\r\n            let ni = i + di, nj = j + dj;\r\n            if (ni >= 0 && ni < this.size && nj >= 0 && nj < this.size && this.board[ni][nj] !== 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    winningPos(i, j, side) {\r\n        let pattern3 = 0, pattern4 = 0, limit = this.condition\r\n        let length = 1, nonBlockStart, nonBlockEnd, rightSide, reverseSide\r\n        let iterator = 1\r\n\r\n        // chiều ngang thuận\r\n        while (\r\n            j + iterator < this.size && \r\n            this.board[i][j + iterator] === side\r\n        ) {\r\n            length++; iterator++\r\n        } rightSide = iterator\r\n        // chiều ngang nghich\r\n        iterator = 1\r\n        while (\r\n            j - iterator >= 0 && \r\n            this.board[i][j - iterator] === side\r\n        ) {\r\n            length++; iterator++\r\n        } reverseSide = iterator\r\n\r\n        if (length >= limit) return this.winningMove\r\n        nonBlockStart = (j - reverseSide >= 0 && this.board[i][j - reverseSide] === 0)\r\n        nonBlockEnd = (j + rightSide < this.size && this.board[i][j + rightSide] === 0)\r\n\r\n        if (length === limit - 1 && (nonBlockStart || nonBlockEnd)) { pattern3++ }\r\n        if (nonBlockStart && nonBlockEnd) {\r\n            if (length === limit - 1) { pattern4++ }\r\n            else if (length === limit - 2) pattern3++\r\n        }\r\n\r\n        //chiều dọc thuận\r\n        length = 1;\r\n        iterator = 1;\r\n        while (\r\n            i + iterator < this.size &&\r\n            this.board[i + iterator][j] === side\r\n        ) {\r\n            length++; iterator++\r\n        } rightSide = iterator\r\n        // chiều dọc nghich\r\n        iterator = 1\r\n        while (\r\n            i - iterator >= 0 &&\r\n            this.board[i - iterator][j] === side\r\n        ) {\r\n            length++; iterator++\r\n        } reverseSide = iterator\r\n\r\n        if (length >= limit) return this.winningMove\r\n        nonBlockStart = (i - reverseSide >= 0 && this.board[i - reverseSide][j] === 0)\r\n        nonBlockEnd = (i + rightSide < this.size && this.board[i + rightSide][j] === 0)\r\n\r\n        if (length === limit - 1 && (nonBlockStart || nonBlockEnd)) { pattern3++ }\r\n        if (nonBlockStart && nonBlockEnd) {\r\n            if (length === limit - 1) {pattern4++}\r\n            else if (length === limit - 2) pattern3++\r\n        }\r\n\r\n        //chiều chéo phụ thuận\r\n        length = 1;\r\n        iterator = 1;\r\n        while (\r\n            i + iterator < this.size &&\r\n            j + iterator < this.size &&\r\n            this.board[i + iterator][j + iterator] === side\r\n        ) {\r\n            length++; iterator++\r\n        } rightSide = iterator\r\n        // chiều chéo phụ nghich\r\n        iterator = 1\r\n        while (\r\n            i - iterator >= 0 &&\r\n            j - iterator >= 0 &&\r\n            this.board[i - iterator][j - iterator] === side\r\n        ) {\r\n            length++; iterator++\r\n        } reverseSide = iterator\r\n\r\n        if (length >= limit) return this.winningMove\r\n        nonBlockStart = (\r\n            i - reverseSide >= 0 &&\r\n            j - reverseSide >= 0 &&\r\n            this.board[i - reverseSide][j - reverseSide] === 0\r\n        )\r\n        nonBlockEnd = (\r\n            i + rightSide < this.size && \r\n            j + rightSide < this.size && \r\n            this.board[i + rightSide][j + rightSide] === 0\r\n        )\r\n\r\n        if (length === limit - 1 && (nonBlockStart || nonBlockEnd)) { pattern3++ }\r\n        if (nonBlockStart && nonBlockEnd) {\r\n            if (length === limit - 1) {pattern4++}\r\n            else if (length === limit - 2) pattern3++\r\n        }\r\n\r\n        //chiều chéo chính thuận\r\n        length = 1;\r\n        iterator = 1\r\n        while (\r\n            i - iterator >= 0 &&\r\n            j + iterator < this.size &&\r\n            this.board[i - iterator][j + iterator] === side\r\n        ) {\r\n            length++; iterator++\r\n        } rightSide = iterator\r\n        // chiều chéo chính nghich\r\n        iterator = 1\r\n        while (\r\n            i + iterator < this.size &&\r\n            j - iterator >= 0 &&\r\n            this.board[i + iterator][j - iterator] === side\r\n        ) {\r\n            length++; iterator++\r\n        } reverseSide = iterator\r\n\r\n        if (length >= limit) return this.winningMove\r\n        nonBlockStart = (\r\n            i + reverseSide < this.size && \r\n            j - reverseSide >= 0 &&\r\n            this.board[i + reverseSide][j - reverseSide] === 0\r\n        )\r\n        nonBlockEnd = (\r\n            i - rightSide >= 0 && \r\n            j + rightSide < this.size &&\r\n            this.board[i - rightSide][j + rightSide] === 0\r\n        )\r\n\r\n        if (length === limit - 1 && (nonBlockStart || nonBlockEnd)) { pattern3++ }\r\n        if (nonBlockStart && nonBlockEnd) {\r\n            if (length === limit - 1) {pattern4++}\r\n            else if (length === limit - 2) pattern3++\r\n        }\r\n\r\n        if (pattern4 !== 0) return this.openFour\r\n        if (pattern3 >= 2) return this.fork //tạo nước đôi hoặc nhiều hơn thế\r\n        return -1\r\n\r\n    }\r\n\r\n    evaluatePos(a, side) {\r\n        let maxA = -1;\r\n        const { left, top, right, bottom } = this.partition;\r\n        const opposite = side === 1 ? 2 : 1\r\n        for (let i = top; i <= bottom; i++) {\r\n            for (let j = left; j <= right; j++) {\r\n                if (this.board[i][j] !== 0 || !this.hasNeighbors(i, j)) { a[i][j] = -1; continue; }\r\n                let wp = this.winningPos(i, j, side);\r\n\r\n                if (wp > 0) { a[i][j] = wp; } \r\n                else {\r\n                    let nPos = [1, 1, 1, 1];\r\n                    let dirA = [0, 0, 0, 0];\r\n                    let A = [0, 0, 0, 0];\r\n\r\n                    let minLeft = Math.max(j - this.condition - 1, 0)\r\n                    let maxRight = Math.min(j + this.condition, this.size) \r\n                    let minTop = Math.max(i - this.condition - 1, 0) \r\n                    let maxBottom = Math.min(i + this.condition, this.size)\r\n\r\n                    // Ngang\r\n                    let m = 1; while (j + m < maxRight && this.board[i][j + m] !== opposite) { nPos[0]++; A[0] += this.w[m]; m++; }\r\n                    if (j + m >= this.size || this.board[i][j + m] === opposite) A[0] -= (this.board[i][j + m - 1] === side) ? (this.w[this.condition] * -1) : 0;\r\n                    m = 1; while (j - m >= minLeft && this.board[i][j - m] !== opposite) { nPos[0]++; A[0] += this.w[m]; m++; }\r\n                    if (j - m < 0 || this.board[i][j - m] === opposite) A[0] -= (this.board[i][j - m + 1] === side) ? (this.w[this.condition] * -1) : 0;\r\n                    dirA[0] = (nPos[0] > this.condition - 1) ? A[0] * A[0] : 0;\r\n                    // Dọc\r\n                    m = 1; while (i + m < maxBottom && this.board[i + m][j] !== opposite) { nPos[1]++; A[1] += this.w[m]; m++; }\r\n                    if (i + m >= this.size || this.board[i + m][j] === opposite) A[1] -= (this.board[i + m - 1][j] === side) ? (this.w[this.condition] * -1) : 0;\r\n                    m = 1; while (i - m >= minTop && this.board[i - m][j] !== opposite) { nPos[1]++; A[1] += this.w[m]; m++; }\r\n                    if (i - m < 0 || this.board[i - m][j] === opposite) A[1] -= (this.board[i - m + 1][j] === side) ? (this.w[this.condition] * -1) : 0;\r\n                    dirA[1] = (nPos[1] > this.condition - 1) ? A[1] * A[1] : 0;\r\n                    // Chéo chính\r\n                    m = 1; while (i + m < maxBottom && j + m < maxRight && this.board[i + m][j + m] !== opposite) { nPos[2]++; A[2] += this.w[m]; m++; }\r\n                    if (i + m >= this.size || j + m >= this.size || this.board[i + m][j + m] === opposite) A[2] -= (this.board[i + m - 1][j + m - 1] === side) ? (this.w[this.condition] * -1) : 0;\r\n                    m = 1; while (i - m >= minTop && j - m >= minLeft && this.board[i - m][j - m] !== opposite) { nPos[2]++; A[2] += this.w[m]; m++; }\r\n                    if (i - m < 0 || j - m < 0 || this.board[i - m][j - m] === opposite) A[2] -= (this.board[i - m + 1][j - m + 1] === side) ? (this.w[this.condition] * -1) : 0;\r\n                    dirA[2] = (nPos[2] > this.condition - 1) ? A[2] * A[2] : 0;\r\n                    // Chéo phụ\r\n                    m = 1; while (i + m < maxBottom && j - m >= minLeft && this.board[i + m][j - m] !== opposite) { nPos[3]++; A[3] += this.w[m]; m++; }\r\n                    if (i + m >= this.size || j - m < 0 || this.board[i + m][j - m] === opposite) A[3] -= (this.board[i + m - 1][j - m + 1] === side) ? (this.w[this.condition] * -1) : 0;\r\n                    m = 1; while (i - m >= minTop && j + m < maxRight && this.board[i - m][j + m] !== opposite) { nPos[3]++; A[3] += this.w[m];  m++; }\r\n                    if (i - m < 0 || j + m >= this.size || this.board[i - m][j + m] === opposite) A[3] -= (this.board[i - m + 1][j + m - 1] === side) ? (this.w[this.condition] * -1) : 0;\r\n                    dirA[3] = (nPos[3] > this.condition - 1) ? A[3] * A[3] : 0;\r\n                    let A1 = 0, A2 = 0;\r\n                    for (let k = 0; k <= 3; k++) {\r\n                        if (dirA[k] >= A1) { A2 = A1; A1 = dirA[k]; }\r\n                    }\r\n                    a[i][j] = A1 + A2;\r\n                }\r\n                if (a[i][j] > maxA) maxA = a[i][j];\r\n            }\r\n        }\r\n        return maxA;\r\n    }\r\n\r\n    getBestMove() {\r\n        this._partitionBoard();\r\n        let s = Array.from({ length: this.size }, () => Array(this.size).fill(0));\r\n        let q = Array.from({ length: this.size }, () => Array(this.size).fill(0));\r\n        let maxS = this.evaluatePos(s, this.player);\r\n        let maxQ = this.evaluatePos(q, this.ai);\r\n\r\n        let moves = [];\r\n        const { left, top, right, bottom } = this.partition;\r\n        for (let i = top; i <= bottom; i++) {\r\n            for (let j = left; j <= right; j++) {\r\n                if (q[i][j] > -1 || s[i][j] > -1) {\r\n                    let value = maxQ >= maxS ? q[i][j] : s[i][j] * s[i][j];\r\n                    moves.push({ value, index: [i, j] });\r\n                }\r\n            }\r\n        }\r\n        if (moves.length === 0) {\r\n            let center = Math.floor(this.size / 2);\r\n            return { r: center, c: center };\r\n        }\r\n        moves.sort((a, b) => b.value - a.value);\r\n\r\n        let nTop;\r\n        if (this.level === 'hard') nTop = Math.min(1, moves.length);\r\n        else if (this.level === 'medium') nTop = Math.min(2, moves.length);\r\n        else nTop = Math.min(4, moves.length);\r\n        let randomK = Math.floor(Math.random() * nTop);\r\n        return { r: moves[randomK].index[0], c: moves[randomK].index[1] };\r\n    }\r\n}"],"names":["AI","constructor","init","this","board","size","ai","player","condition","partition","left","right","top","bottom","w","winningMove","openFour","fork","level","setBoard","_partitionBoard","found","r","c","Math","min","max","center","floor","hasNeighbors","i","j","dirs","di","dj","ni","nj","winningPos","side","nonBlockStart","nonBlockEnd","rightSide","reverseSide","pattern3","pattern4","limit","length","iterator","evaluatePos","a","maxA","opposite","wp","nPos","dirA","A","minLeft","maxRight","minTop","maxBottom","m","A1","A2","k","getBestMove","s","Array","from","fill","q","maxS","maxQ","moves","value","push","index","nTop","sort","b","randomK","random"],"sourceRoot":""}
{"version":3,"file":"static/js/988.fb14ed53.chunk.js","mappings":"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","sources":["Pages/Sudoku/CreateSudoku.js"],"sourcesContent":["\r\nexport default class SudokuGame {\r\n    constructor(variant = {}) {\r\n        this._size = variant?.size || 9\r\n        this._grid = Array.from({ length: variant?.size || 9 }, () =>\r\n            Array.from({ length: variant?.size || 9 }, () => 0)\r\n        )\r\n        this.difficulty = variant?.difficulty || 40\r\n        this.answers = []\r\n        this.puzzle = []\r\n    }\r\n\r\n\r\n    //getter\r\n    getPuzzle() {\r\n        let newPuzzle = this.puzzle\r\n        return newPuzzle\r\n    }\r\n\r\n    getSolution() {\r\n        let newSolution = this.solution\r\n        return newSolution\r\n    }\r\n\r\n    getSize() {\r\n        let size = this._size\r\n        return size\r\n    }\r\n\r\n    getAnswer() {\r\n        const answers = this.answers\r\n        return answers\r\n    }\r\n\r\n    //methods \r\n    _solve() {\r\n        for (let row = 0; row < this._size; row++) {\r\n            for (let col = 0; col < this._size; col++) {\r\n                if (this._grid[row][col] === 0) {\r\n\r\n                    for (let num = 1; num <= this._size; num++) {\r\n                        if (this._isValid(row, col, num)) {\r\n                            this._grid[row][col] = num\r\n\r\n                            if (this._solve()) {\r\n                                return true\r\n                            }\r\n\r\n                            this._grid[row][col] = 0\r\n                        }\r\n                    }\r\n\r\n                    //không có số nào hợp lệ để điền\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        // không còn ô nào = 0 nữa -> giải xong\r\n        return true\r\n    }\r\n\r\n    _isValid(row, col, num, grid = this._grid) {\r\n\r\n        //kiểm tra hàng có số num chưa\r\n        for (let i = 0; i < this._size; i++) {\r\n            if (grid[row][i] === num) return false\r\n        }\r\n\r\n        //kiểm tra cột\r\n        for (let i = 0; i < this._size; i++) {\r\n            if (grid[i][col] === num) return false\r\n        }\r\n\r\n\r\n        //kiểm tra khu vực ô vuông lớn\r\n        // ví dụ 9x9 thì kiểm tra các khu vực 3x3\r\n        const areaSize = Math.sqrt(this._size)\r\n        const [row_area, col_area] = [\r\n            areaSize * Math.floor(row / areaSize),\r\n            areaSize * Math.floor(col / areaSize)\r\n        ]\r\n        for (let i = 0; i < areaSize; i++) {\r\n            for (let j = 0; j < areaSize; j++) {\r\n                if (grid[i + row_area][j + col_area] === num) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    _clearGrid() {\r\n        this._grid = Array.from({ length: this._size || 9 }, () =>\r\n            Array.from({ length: this._size || 9 }, () => 0)\r\n        )\r\n    }\r\n\r\n    _generateSuccessfullyGrid() {\r\n        for (let row = 0; row < this._size; row++) {\r\n            for (let col = 0; col < this._size; col++) {\r\n                if (this._grid[row][col] === 0) return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    _generateFullGird() {\r\n\r\n        while (!this._generateSuccessfullyGrid()) {\r\n\r\n            this._clearGrid()\r\n\r\n            const position = new Set()\r\n            // tạo ngẫu nhiên 10 số vào grid để khởi tạo -> sau đó solve\r\n            // cho ra một bảng hoàn chỉnh\r\n            for (let i = 0; i < 10; i++) {\r\n                const [row, col] = [\r\n                    Math.floor(Math.random() * this._size),\r\n                    Math.floor(Math.random() * this._size)\r\n                ]\r\n                const num = Math.floor(Math.random() * this._size) + 1\r\n\r\n                if (\r\n                    !position.has(`${row}-${col}`) &&\r\n                    this._isValid(row, col, num)\r\n                ) {\r\n                    this._grid[row][col] = num\r\n                    position.add(`${row}-${col}`)\r\n                }\r\n            }\r\n\r\n            this._solve()\r\n\r\n        }\r\n\r\n    }\r\n\r\n    _getPositions() {\r\n        const positions = []\r\n        for (let row = 0; row < this._size; row++) {\r\n            for (let col = 0; col < this._size; col++) {\r\n                positions.push([row, col])\r\n            }\r\n        }\r\n\r\n        return positions\r\n    }\r\n\r\n    _shuffleArray(array) {\r\n        const shuffled = array.map(([row, col]) => [row, col]); // Tạo bản copy\r\n        for (let i = shuffled.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]; // Hoán đổi\r\n        }\r\n        return shuffled;\r\n    }\r\n\r\n    _hasUniqueSolution(grid) {\r\n        const copyGrid = grid.map(rows => {\r\n            return rows.map(col => col)\r\n        })\r\n\r\n        const solutions = []\r\n\r\n        const countSolutions = () => {\r\n            for (let row = 0; row < this._size; row++) {\r\n                for (let col = 0; col < this._size; col++) {\r\n                    if (copyGrid[row][col] === 0) {\r\n                        for (let num = 1; num <= this._size; num++) {\r\n                            if (this._isValid(row, col, num, copyGrid)) {\r\n                                copyGrid[row][col] = num\r\n                                countSolutions()\r\n                                copyGrid[row][col] = 0\r\n\r\n                                if (this._size < 16 && solutions.length > 1) return\r\n                                if (this._size === 16 && solutions.length > 2) return\r\n                            }\r\n                        }\r\n\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n            solutions.push(1)\r\n        }\r\n        countSolutions()\r\n        return solutions.length === 1\r\n\r\n    }\r\n\r\n    createPuzzle() {\r\n        const positions = this._getPositions()\r\n        const shuffledPositions = this._shuffleArray(positions)\r\n\r\n        let removed = 0\r\n        this._generateFullGird()\r\n\r\n        //gán bằng bảng full sau đó xóa bớt các ô để tạo câu đố\r\n        this.puzzle = this._grid.map(rows => {\r\n            return rows.map(col => col)\r\n        })\r\n\r\n        for (const square of shuffledPositions) {\r\n            if (removed >= this.difficulty) break\r\n\r\n            const [row, col] = square\r\n            const backup = this.puzzle[row][col]\r\n            this.puzzle[row][col] = 0\r\n\r\n            if (this._hasUniqueSolution(this.puzzle)) {\r\n                removed += 1\r\n            }\r\n            else {\r\n                this.puzzle[row][col] = backup\r\n            }\r\n        }\r\n\r\n\r\n        //tạo xong câu đố thì cũng tạo thêm lời giải tương ứng\r\n        this._createAnswer()\r\n\r\n        return this.puzzle\r\n    }\r\n\r\n    _createAnswer() {\r\n        const answers = []\r\n        for (let row = 0; row < this._size; row++) {\r\n            for (let col = 0; col < this._size; col++) {\r\n                if (this.puzzle[row][col] === 0) {\r\n                    answers.push({\r\n                        \"square\": [row, col],\r\n                        \"correct-value\": this._grid[row][col]\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        this.answers = answers\r\n    }\r\n\r\n}"],"names":["SudokuGame","constructor","variant","arguments","length","undefined","this","_size","size","_grid","Array","from","difficulty","answers","puzzle","getPuzzle","getSolution","solution","getSize","getAnswer","_solve","row","col","num","_isValid","grid","i","areaSize","Math","sqrt","row_area","col_area","floor","j","_clearGrid","_generateSuccessfullyGrid","_generateFullGird","position","Set","random","has","concat","add","_getPositions","positions","push","_shuffleArray","array","shuffled","map","_ref","_hasUniqueSolution","copyGrid","rows","solutions","countSolutions","createPuzzle","shuffledPositions","removed","square","backup","_createAnswer"],"sourceRoot":""}